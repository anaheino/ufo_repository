AWSTemplateFormatVersion: '2010-09-09'
Description: Basic CloudFormation template to deploy infrastructure for the ufo map.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: PrivateSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  MongoDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MongoDB server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 10.0.0.0/16  # Allow access within the VPC

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Backend servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allow HTTP access from anywhere
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref MongoDBSecurityGroup  # Allow access from MongoDB Security Group

  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet
      SecurityGroups:
        - !Ref BackendSecurityGroup
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5

  MongoDBLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-<your-mongodb-golden-ami>
      InstanceType: t3.medium
      SecurityGroups:
        - !Ref MongoDBSecurityGroup
      KeyName: <your-key-pair>
      AssociatePublicIpAddress: false  # In a private subnet

  MongoDBAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      LaunchConfigurationName: !Ref MongoDBLaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1

  BackendLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-<your-backend-golden-ami>
      InstanceType: t3.medium
      SecurityGroups:
        - !Ref BackendSecurityGroup
      KeyName: <your-key-pair>
      AssociatePublicIpAddress: false  # In a private subnet
      UserData: !Base64 |
        #!/bin/bash
        # Commands to start your backend application

  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      LaunchConfigurationName: !Ref BackendLaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      LoadBalancerNames:
        - !Ref BackendLoadBalancer

  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: your-frontend-bucket-name

  FrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::your-frontend-bucket-name/*"

Outputs:
  VPCId:
    Description: The VPC Id
    Value: !Ref VPC

  PublicSubnetId:
    Description: The Public Subnet Id
    Value: !Ref PublicSubnet

  PrivateSubnetId:
    Description: The Private Subnet Id
    Value: !Ref PrivateSubnet

  BackendLoadBalancerDNSName:
    Description: The DNS name of the Backend Load Balancer
    Value: !GetAtt BackendLoadBalancer.DNSName

  FrontendS3BucketName:
    Description: The name of the S3 bucket for the Frontend
    Value: !Ref FrontendS3Bucket